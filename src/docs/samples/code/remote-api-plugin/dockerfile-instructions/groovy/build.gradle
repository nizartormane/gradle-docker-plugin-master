plugins {
    id 'com.bmuschko.docker-remote-api' version '{gradle-project-version}'
}

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import static com.bmuschko.gradle.docker.tasks.image.Dockerfile.Instruction
import static com.bmuschko.gradle.docker.tasks.image.Dockerfile.FromInstruction
import static com.bmuschko.gradle.docker.tasks.image.Dockerfile.From

// tag::existing-instructions[]
tasks.create('createDockerfile', Dockerfile) {
    from('openjdk:jre-alpine')
    copyFile('my-app-1.0.jar', '/app/my-app-1.0.jar')
    entryPoint('java')
    defaultCommand('-jar', '/app/my-app-1.0.jar')
    exposePort(8080)
}
// end::existing-instructions[]

// tag::modify-instruction[]
createDockerfile {
    List<Instruction> originalInstructions = new ArrayList<Instruction>(instructions.get())
    int fromInstructionIndex = originalInstructions
            .findIndexOf { it.keyword == FromInstruction.KEYWORD }
    originalInstructions.remove(fromInstructionIndex)
    FromInstruction baseImage = new FromInstruction(new From('openjdk:8-alpine'))
    originalInstructions.add(0, baseImage)
    instructions.set(originalInstructions)
}
// end::modify-instruction[]

// tag::add-instruction[]
createDockerfile {
    instruction 'HEALTHCHECK CMD wget --quiet --tries=1 --spider http://localhost:8080/actuator/health || exit 1'
}
// end::add-instruction[]

task printDockerfileInstructions {
    doLast {
        def instructions = createDockerfile.instructions.get()
        def joinedInstructions = instructions.collect { it.text }
                .join(System.properties['line.separator'])
        println joinedInstructions
    }
}
